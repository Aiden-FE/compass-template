# {{projectName}}

> {{projectDescription}}

## Features

### 支持 Sass,Postcss,autoprefixer,tailwindcss

示例如下:

```tsx
import style from './index.module.scss';

export default function Demo() {
  return (
    <div className="w-full h-full">
      <h2 className="text-xl font-semibold">BEM&ModuleCSS&Scss&Tailwindcss 展示</h2>
      <div className={style['cp-block']}>
        block
        <div className={style['cp-block__element']}>
        element
          <div className={style['cp-block__element_modifier']}>modifier</div>
        </div>
      </div>
      <h2 className="text-xl font-semibold">autoprefixer 展示</h2>
      <div className="origin-top-left rotate-12 w-[80px] h-[80px] bg-[yellow]"></div>
    </div>
  );
}
```

### 支持BEM

示例如下:

*index.module.scss*文件内容:

```scss
// 第二个参数控制的是前缀默认前缀是全局 $domain 值
@include b(block) { // cp-block  cp前缀可修改variables.scss内的$domain变量来变更
  font-size: 20px;
  @include e(element) { // cp-block__element
    font-size: 16px;
    @include m(modifier) { // cp-block__element_modifier
      font-size: 12px;
    }
  }
}
```

组件用法:

```tsx
import style from './index.module.scss';

export default function Demo() {
  return (
    <div className="w-full h-full">
      <h2 className="text-xl font-semibold">BEM&ModuleCSS&Scss&Tailwindcss 展示</h2>
      <div className={style['cp-block']}>
        block
        <div className={style['cp-block__element']}>
        element
          <div className={style['cp-block__element_modifier']}>modifier</div>
        </div>
      </div>
    </div>
  );
}
```

> 如果需要更换 `cp` 作用域前缀请修改 `src/assets/styles/variables.scss` 文件内容的$domain值


### 支持 Icon及 Svg 使用

基于 [Iconify](https://iconify.design/docs/) 实现,所有[IconSets](https://icon-sets.iconify.design/)图标均可直接使用,内部按需加载,并且支持直接使用项目内部的svg文件

示例如下:

```tsx
import Image from 'next/image';
import AppIcon from '@/components/app-icon/app-icon';
import SettingSvg from '@/assets/svgs/setting.svg';
import SettingSvgUrl from '@/assets/svgs/setting.svg?url';

function ExamplePage() {
  return (
    <>
      {/* 使用 IconSets 所有图标 */}
      <AppIcon className="text-4xl" icon="mdi-light:home" />
      {/* 使用业务特有的 svg 图标文件 */}
      <SettingSvg className="text-4xl" />
      {/* 使用svg url模式结合 image 使用 */}
      <Image src={SettingSvgUrl} className="w-9 h-9" alt="This is the settings icon." />
    </>
  );
}

export default ExamplePage;
```

### 支持Zustand状态管理

创建及使用zustand参考如下使用方式:

创建store

```typescript
// src/stores/theme.ts
import { createStore } from 'zustand/vanilla'

export type ThemeState = {}

export type ThemeActions = {}

export type ThemeStore = ThemeState & ThemeActions

export const createDefaultThemeState = () => ({} as ThemeState);

export const createThemeStore = (
  initState: ThemeState = createDefaultThemeState(),
) => {
  return createStore<ThemeStore>()((set) => ({
    ...initState,
    // some actions
  }));
}
```

创建注入器

```typescript
// src/providers/theme-store.ts
'use client';

import { type ReactNode, createContext, useRef, useContext, useEffect } from 'react';
import { type StoreApi, useStore } from 'zustand';
import { type ThemeStore, createThemeStore, createDefaultThemeState } from '@/stores/theme';

export const ThemeStoreContext = createContext<StoreApi<ThemeStore> | null>(
  null,
);

export interface ThemeStoreProviderProps {
  children: ReactNode;
}

export const ThemeStoreProvider = ({
  children,
}: ThemeStoreProviderProps) => {
  const storeRef = useRef<StoreApi<ThemeStore>>();
  if (!storeRef.current) {
    storeRef.current = createThemeStore(createDefaultThemeState());
  }

  return (
    <ThemeStoreContext.Provider value={storeRef.current}>
      {children}
    </ThemeStoreContext.Provider>
  );
};

export const useThemeStore = <T,>(
  selector: (store: ThemeStore) => T,
): T => {
  const themeStoreContext = useContext(ThemeStoreContext);

  if (!themeStoreContext) {
    throw new Error(`useThemeStore must be use within ThemeStoreProvider`);
  }

  return useStore(themeStoreContext, selector);
};
```

使用注入器

```typescript
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import { ThemeStoreProvider } from "@/providers/theme-store";
import "@/assets/styles/global.scss";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={inter.className} suppressHydrationWarning={true}>
        <ThemeStoreProvider>
          {children}
        </ThemeStoreProvider>
      </body>
    </html>
  );
}
```

业务组件使用

```typescript
'use client';
import { useThemeStore } from '@/providers/theme-store';

export default function ThemeExample() {
  const { currentTheme } = useThemeStore((state) => state.currentTheme);

  return (
    <div>
      {currentTheme}
    </div>
  );
}
```

### 主题

主题预设两种,为`light`、`dark`,可使用Api设置为跟随系统主题,默认跟随主题

要扩展主题下对应的CSS变量,请修改`src/assets/styles/global.scss`文件,修改`:root`和`[data-theme="dark"]`两个选择器内对应的css变量

使用示例如下:

```tsx
'use client';
import { useThemeStore } from '@/providers/theme-store';

export default function ThemeExample() {
  const { currentTheme, setTheme, getCurrentThemeValueByKey, getCurrentThemeValues } = useThemeStore((state) => state);

  // 主动切换主题
  function toggleTheme() {
    setTheme(currentTheme === 'light' ? 'dark' : 'light');
  }

  // 设置为跟随系统主题
  function setSystemTheme() {
    setTheme('system');
  }
  
  // 根据当前主题打印主题值
  function consoleThemeValue() {
    // 打印特定变量名的主题值
    console.log('获取特定key值', getCurrentThemeValueByKey('--foreground-rgb'));
    // 打印所有css变量值
    console.log('获取所有CSS变量', getCurrentThemeValues());
    // 打印所有"--background"前缀的CSS变量
    console.log('获取所有"--background"前缀的CSS变量', getCurrentThemeValues(/^--background.*$/));
  }
  
  return (
    <div>
      {currentTheme}
      <br />
      <button onClick={toggleTheme} className="px-4 py-2 mr-2 font-semibold text-sm text-white rounded-md shadow-sm bg-sky-500 hover:bg-sky-600">切换主题</button>
      <button onClick={setSystemTheme} className="px-4 py-2 mr-2 font-semibold text-sm text-white rounded-md shadow-sm bg-sky-500 hover:bg-sky-600">使用系统主题</button>
      <button onClick={consoleThemeValue} className="px-4 py-2 font-semibold text-sm text-white rounded-md shadow-sm bg-sky-500 hover:bg-sky-600">控制台打印主题变量</button>
    </div>
  );
}
```

### 国际化

客户端组件使用示例:
```tsx
'use client';
import { useClientTranslation } from '@/i18n/client';
import { AvailableLanguages } from '@/config';

function ClientI18nExample() {
  const { t, i18n, changeLanguage } = useClientTranslation();

  return (
    <div>
      {t('The current language is', { lang: i18n.resolvedLanguage })}
      <br />
      <div>
        <button
          className="px-4 py-2 mr-2 font-semibold text-sm text-white rounded-md shadow-sm bg-sky-500 hover:bg-sky-600"
          onClick={() => changeLanguage(AvailableLanguages.ZH)}
          type="button"
        >
          使用中文
        </button>
        <button
          className="px-4 py-2 mr-2 font-semibold text-sm text-white rounded-md shadow-sm bg-sky-500 hover:bg-sky-600"
          onClick={() => changeLanguage(AvailableLanguages.EN)}
          type="button"
        >
          Use English
        </button>
      </div>
    </div>
  );
}
export default ClientI18nExample;
```

服务端组件使用示例:
```tsx
import { useServerTranslation } from '@/i18n/server';
import { AvailableLanguages } from '@/config';
import Link from 'next/link';
import { AppComponentProps } from '@/interfaces';
import ServerToggleBtns from './server-toggle-btns';

async function I18nExample({ lng }: AppComponentProps) {
  const { t, i18n } = await useServerTranslation(lng || AvailableLanguages.ZH);

  return (
    <div>
      {t('The current language is', { lang: i18n.resolvedLanguage })}
      <br />
      <div>
        <Link
          className="px-4 py-2 mr-2 font-semibold text-sm text-white rounded-md shadow-sm bg-sky-500 hover:bg-sky-600"
          href={`/${AvailableLanguages.ZH}/demo`}
        >
          link方式 使用中文
        </Link>
        <Link
          className="px-4 py-2 mr-2 font-semibold text-sm text-white rounded-md shadow-sm bg-sky-500 hover:bg-sky-600"
          href={`/${AvailableLanguages.EN}/demo`}
        >
          Use link to toggle English
        </Link>
        <ServerToggleBtns />
      </div>
    </div>
  );
}

export default I18nExample;

// ./server-toggle-btns 代码如下
'use client';

import { AvailableLanguages } from "@/config";
import { useClientTranslation } from "@/i18n/client";

export default function ServerToggleBtns() {
  const { changeLanguage } = useClientTranslation();

  function onClickChangeLanguage(lang: AvailableLanguages) {
    changeLanguage(lang);
  }

  return (
    <>
      <button
        className="px-4 py-2 mr-2 font-semibold text-sm text-white rounded-md shadow-sm bg-sky-500 hover:bg-sky-600"
        onClick={() => onClickChangeLanguage(AvailableLanguages.ZH)}
        type="button"
      >
        编程方式切换中文
      </button>
      <button
        className="px-4 py-2 mr-2 font-semibold text-sm text-white rounded-md shadow-sm bg-sky-500 hover:bg-sky-600"
        onClick={() => onClickChangeLanguage(AvailableLanguages.EN)}
        type="button"
      >
        Use javascript to toggle English
      </button>
    </>
  )
}
```
