- [{{projectName}}](#{{projectName}})
  - [特性](#特性)
    - [支持读取配置文件](#支持读取配置文件)
    - [高性能](#高性能)
    - [接口多版本支持](#接口多版本支持)
    - [接口限流保护](#接口限流保护)
    - [接口入参校验及转换](#接口入参校验及转换)
    - [日志中间件](#日志中间件)
    - [统一返回处理](#统一返回处理)
    - [支持Swagger API文档](#支持swagger-api文档)
    - [基于Docker快速构建分发](#基于docker快速构建分发)
    - [JWT Token处理](#jwt-token处理)
    - [支持连接到Redis](#支持连接到redis)
    - [支持使用 Email](#支持使用-email)
    - [支持Google reCAPTCHA v3 人机校验](#支持google-recaptcha-v3-人机校验)
    - [支持Mysql](#支持mysql)
      - [迁移](#迁移)

# {{projectName}}
> {{projectDescription}}

## 特性

### 支持读取配置文件

配置文件默认读取程序执行目录下的 `.env` 文件,需要修改配置路径提供 `APP_ENV_FILE_PATH` 环境变量即可, 默认路径为: `path.resolve(process.cwd(), '.env')`

所有可用的环境变量 `.env.example` 文件内已展示, 当需要新增环境变量时建议更新 `.env.example` 文件进行引导

```typescript
console.log(process.env.APP_DEBUG) // 直接读取环境变量即可
```

### 高性能

默认采用 Fastify 高性能框架

### 接口多版本支持

用法示例如下:

```typescript
@Controller('example')
export class ExampleController {
  // 访问地址: /api/v1/example/test
  @Get('test')
  test(): string {
    return 'This is v1 endpoint.';
  }

  // 访问地址: /api/v2/example/test
  @Version('2')
  @Get('test')
  test2(): string {
    return 'This is v2 endpoint.';
  }
}
```

### 接口限流保护

默认一个IP一个接口 1 分钟仅允许调用 60 次,特例场景可以通过装饰器跳过限流或局部修改限流,示例如下:

```typescript
import { Controller, Get } from '@nestjs/common';
import { SkipThrottle, Throttle } from '@nestjs/throttler';

@Controller('example')
export class ExampleController {
  // 该接口跳过节流保护
  @SkipThrottle()
  @Get('test')
  test(): string {
    return 'Hello world.';
  }

  // 该接口每分钟调用不超过10次
  @Throttle({ default: { limit: 10, ttl: 60 * 1000 } })
  @Get('test2')
  test(): string {
    return 'Hello world.';
  }

  // 默认采用全局节流配置
  @Get('test3')
  test(): string {
    return 'Hello world.';
  }
}
```

如需对全局默认限流进行修改,请参考 .env.example 示例说明,提供 APP_THROTTLE_TTL 及 APP_THROTTLE_LIMIT 参数即可.

### 接口入参校验及转换

定义 dto 类:
```typescript
import { IsNumber, IsString, IsOptional } from 'class-validator';

class ADto {
  @IsString()
  id: string;
}

class BDto {
  @IsNumber()
  age: number;
}

class CDto {
  @IsString()
  name: string;

  @IsOptional()
  @IsString()
  address?: string;
}
```

应用 Dto:

```typescript
@Controller('example')
export class ExampleController {
  /**
   * @description 假如入参是 { name: 'test', test: 'test' }
   * 实际body会是 { name: 'test' }, test属性会被自动移除
   */
  @Get('test')
  test(@Query() query: CDto) {
    return 'Hello world.';
  }
}
```

更多详细用法参考: [Nest Validator](https://docs.nestjs.com/techniques/validation#using-the-built-in-validationpipe)

### 日志中间件

默认打印接口请求,类似如下结构:

`[Nest] 53739  - 2024/12/03 13:57:15     LOG [LoggerMiddleware] HTTP/1.1 GET 127.0.0.1 /api/v1?query-test=test2 +14ms`

### 统一返回处理

在`libs/common/src/interceptors/response.interceptor.ts`定义了默认拦截逻辑.

使用示例如下:


```typescript
import { BusinessStatus, HttpResponse } from '@app/common';

@Controller('example')
export class ExampleController {
  @Get('test')
  test() {
    return 'Hello world.'; // 实际响应: new HttpResponse({ data: 'Hello world.' })
  }

  @Get('test2')
  test2() {
    return new HttpResponse('Hello world.', { responseType: 'raw' }); // 实际响应: 'Hello world.'
  }

  @Get('test3')
  test3() {
    // 尽管是throw,但是客户端收到的返回依旧以HttpResponse配置为准,可以用来快捷中断程序逻辑执行,又控制响应的状态与数据
    throw new HttpResponse({
      data: 'Hello world.',
      statusCode: BusinessStatus.BAD_REQUEST,
      httpStatus: HttpStatus.FORBIDDEN,
    });
  }

  @Get('test4')
  test4() {
    // 实际响应 new HttpResponse({ httpStatus: HttpStatus.INTERNAL_SERVER_ERROR, statusCode: BusinessStatus.INTERNAL_SERVER_ERROR, message: 'Server internal error' })
    throw new Error('Unknown error');
  }
}
```

### 支持Swagger API文档

`npm run start:dev` 或其他start启动项目后,访问/api/docs路径

### 基于Docker快速构建分发

`pnpm build` 构建产物

`docker build . -t <image_name>` 构建镜像

`docker run -d -p <port>:8080 --name <container_name> -v <node_modules_dir>:/root/compass-service/node_modules -v <env_file>:/root/compass-service/.env <image_name>` (-p,--name, -v均为可选参数,) 运行镜像,.env配置文件格式参考 .env.example

### JWT Token处理

前置处理:

放开 `src/main.ts` 内 `app.useGlobalGuards(new JWTAuthGuard(reflector));` 相关内容的注释

调整 `libs/common/src/guards/jwt-auth.guard.ts` 注释内容,并完善相关 FIXME 逻辑

声明开放类或接口:

```typescript
import { Public } from '@app/common';

@Public() // 这里声明整个类都是开放的
@Controller()
export class OauthController {
  @Get('test')
  test() {
    return 'ok';
  }
}

@Controller()
export class DemoController {
  @Public() //  放在这里声明接口是开放的
  @Get('test2')
  test() {
    return 'ok';
  }
}
```

声明保护类或接口,并获取验签通过后的用户信息:

```typescript
import { Auth, PERMISSIONS, User, UserContext } from '@app/common';

@Auth() // 这里声明整个类都是需要授权信息的,如不指明具体权限,用户权限不为空即可
@Controller()
export class TestController {
  @Auth(PERMISSIONS.TEST) // 这里声明,则接口需要TEST权限
  @Get('test')
  test() {
    return 'ok';
  }

  @Auth([PERMISSIONS.TEST, PERMISSIONS.TEST2]) // 这里声明需要TEST以及TEST2双权限
  @Get('test2')
  test2() {
    return 'ok';
  }

  @Auth([PERMISSIONS.TEST, PERMISSIONS.TEST2], 'OR') // 这里声明需要TEST或TEST2之一的权限
  @Get('test3')
  test3() {
    return 'ok';
  }

  // 这里未指定则权限不为空即可,并通过 User 装饰器获取验证通过后的用户信息
  @Get('test4')
  test4(@User() user: UserContext) {
    return user;
  }
}
```

签发 token 参考如下:
```typescript
@Injectable()
export class ExampleService {
  constructor(
    private readonly jwtService: JwtService,
  ) {}

  getToken(user: UserContext) {
    // JWT 授权过期时间配置参考 https://github.com/zeit/ms.js Eg: 60, "2 days", "10h", "7d".
    return this.jwtService.sign(user, { expiresIn: process.env.APP_JWT_EXPIRES }),
  }
}
```

### 支持连接到Redis

基础 [redis](https://github.com/redis/node-redis) 实现

如需使用放开 `src/app.module.ts` redis注册并提供配置即可.

如无需使用请按如下步骤移除:
1. `pnpm remove redis` 移除依赖项
2. 移除 `libs/redis` 文件夹
3. 移除 `package.json`内 moduleNameMapper下的 `^@app/redis(|/.*)$` 配置
4. 移除 `nest-cli.json` 内的 `projects.redis` 配置
5. 移除 `tsconfig.json` 的 `paths` 内的 `@app/redis` 相关配置

### 支持使用 Email

基于 [nodemailer](https://nodemailer.com/) 实现

如需放开 `src/app.module.ts` email注册并提供配置即可.

如无需使用请按如下步骤移除:
1. `pnpm remove nodemailer @types/nodemailer` 移除依赖项
2. 移除 `libs/email` 文件夹
3. 移除 `package.json`内 moduleNameMapper下的 `^@app/email(|/.*)$` 配置
4. 移除 `nest-cli.json` 内的 `projects.email` 配置
5. 移除 `tsconfig.json` 的 `paths` 内的 `@app/email` 相关配置

### 支持Google reCAPTCHA v3 人机校验

客户端参考:
```html
<!-- 插入recaptcha脚本并指定key,如果是国内host需要替换为www.recaptcha.net -->
<script src="https://www.google.com/recaptcha/api.js?render=reCAPTCHA_site_key"></script>

<script>
  // 当点击某个提交按钮时进行人机静默校验,验证失败应该进行双重认证或拒绝访问
  function onClick(e) {
    e.preventDefault();
    // 提示: reCAPTCHA_site_key为您在Google ReCaptcha注册的网站key
    grecaptcha.ready(function() {
      // action各种含义参考: https://developers.google.com/recaptcha/docs/v3?hl=zh-cn#interpreting_the_score
      grecaptcha.execute('reCAPTCHA_site_key', {action: 'login'}).then(function(token) {
        // 在此处添加您的逻辑,把表单数据跟token一起提供给后端校验,接口地址请根据实际路由调整
        fetch('/api/v1/recaptcha/validate', {
          method: 'POST',
          body: JSON.stringify({ token }),
        })
          .then(resp => resp.json())
          .then(result => {
            if (result.statusCode === 100200 && result.data) {
              console.log('签发的临时许可 token: %s, 请在五分钟内使用此token登录', result.data);
            }
          });
      });
    });
  }
</script>
```

服务端流程:

* 在所需使用的路由Module中导入 GoogleRecaptchaModule 并提供密钥注册到路由中
* 在 Service 中,导入 GoogleRecaptchaService 并使用其校验方法 verifyRecaptcha 来验证收到的token信息
* 验证通过后下发一个五分钟有效的临时token
* 用户在登录时可将用户信息与临时token一并提交登录接口
* 登录接口验证token属于签发的授权token并账号密码正确即登录成功

如无需使用请按如下步骤移除:
1. 移除 `libs/google-recaptcha` 文件夹
2. 移除 `package.json`内 moduleNameMapper下的 `^@app/google-recaptcha(|/.*)$` 配置
3. 移除 `nest-cli.json` 内的 `projects.google-recaptcha` 配置
4. 移除 `tsconfig.json` 的 `paths` 内的 `@app/google-recaptcha` 相关配置

### 支持Mysql

基于 [Mysql2](https://sidorares.github.io/node-mysql2/docs) 实现

如需使用放开 `src/app.module.ts` mysql注册并提供配置即可.

如无需使用请按如下步骤移除:
1. `pnpm remove mysql2` 移除依赖项
2. 移除 `libs/mysql` 文件夹
3. 移除 `package.json`内 moduleNameMapper下的 `^@app/mysql(|/.*)$` 配置
4. 移除 `nest-cli.json` 内的 `projects.mysql` 配置
5. 移除 `tsconfig.json` 的 `paths` 内的 `@app/mysql` 相关配置

#### 迁移

> 预置迁移脚本,执行脚本均位于 libs/mysql/src/scripts

`pnpm migrate:create <name>` 创建迁移文件

`pnpm migrate:up` 按照时序迁移至最新版本

`pnpm migrate:down` 回滚至上一个版本

`pnpm migrate:reset` 回滚至初始版本
